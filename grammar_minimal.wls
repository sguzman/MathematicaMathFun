#!/usr/bin/env wolframscript
(* ::Package:: *)

(* ::Input:: *)
(*$RecursionLimit=Infinity*)
(**)
(*collatz[1]=1*)
(**)
(*collatz[n_Integer/;And[n>1,OddQ[n]]]:=collatz[n]=3 n+1*)
(*collatz[n_Integer/;And[n>1,EvenQ[n]]]:=collatz[n]=n/2*)
(**)
(*collatzseq[1]={1}*)
(*collatzseq[n_Integer/;n>1]:=collatzseq[n]={n,Splice@collatzseq@collatz@n}*)
(**)
(*collatzseq[93571393692802302];*)
(**)
(*map[n_Integer/;OddQ[n]]:=o*)
(*map[n_Integer/;EvenQ[n]]:=e*)
(**)
(*oddStrict[n_Real/;n\[Element]PositiveReals]:=3 n+1*)
(*tickStrict[n_Real/;n\[Element]PositiveReals]:=(1+Cos[\[Pi] n])/2*)
(**)
(*tockStrict[n_Real/;n\[Element]PositiveReals]:=1-tickStrict[n]*)
(**)
(*evenStrict[n_Real/;n\[Element]PositiveReals]:=n/2*)
(**)
(*oddStrict[n_Real/;n\[Element]PositiveReals]:=3 n+1*)
(**)
(*evenRecurseRealStrict[x_Real/;x\[Element]PositiveReals,n_Integer/;n\[Element]PositiveIntegers]:=x/2^n*)
(**)
(*oddRecurseRealStrict[x_Real/;x\[Element]PositiveReals,n_Integer/;n\[Element]PositiveIntegers]:=1/2 (-1+3^n)+3^n x*)
(**)
(*odd[n]:=3 n+1*)
(*tick[n]:=(1+Cos[\[Pi] n])/2*)
(*tock[n]:=1-tick[n]*)
(*even[n]:=n/2*)
(*evenRecurseReal[x,n]:=x/2^n*)
(*oddRecurseReal[x,n]:=1/2 (-1+3^n)+3^n x*)
(**)
(*Grid@Table[{i,Map[Splice@ConstantArray[First@#,Last@#]&,FactorInteger[i]]},{i,collatzseq[27]}]*)
(**)
(*Table[With[{val=N@Log[2,Apply[Times,Select[Map[Splice@ConstantArray[First@#,Last@#]&,FactorInteger[i]],2!=#&]]]},val-Floor[val]],{i,collatzseq@27}]*)
(**)
(*c=Map[map,collatzseq[93571393692802302]];*)
(**)
(*Grid@TakeLargestBy[Select[Table[With[{list=Tally@Partition[c,i,1]},Splice@Table[{First@j,i Last@j},{j,list}]],{i,1,100,1}],And[Length@First@#!=Last@#,Length@First@#!=1]&],Last,15]*)


(* ::Input:: *)
(*SequenceReplace[c,{e,o,e}:>A]*)


(* ::Input:: *)
(*Grid@*)
(*TakeLargestBy[*)
(*Select[*)
(*Table[*)
(*With[{list=Tally@Partition[Out[27],i,1]},*)
(*Splice@*)
(*Table[*)
(*{First@j,i Last@j},*)
(*{j,list}]],*)
(*{i,1,100,1}],*)
(*And[*)
(*Length@First@#!=Last@#,*)
(*Length@First@#!=1*)
(*]&],*)
(*Last,15]*)


(* ::Input:: *)
(*SequenceReplace[Out[27],{A,o}:>B]*)


(* ::Input:: *)
(*Grid@*)
(*TakeLargestBy[*)
(*Select[*)
(*Table[*)
(*With[{list=Tally@Partition[Out[29],i,1]},*)
(*Splice@*)
(*Table[*)
(*{First@j,i Last@j},*)
(*{j,list}]],*)
(*{i,1,100,1}],*)
(*And[*)
(*Length@First@#!=Last@#,*)
(*Length@First@#!=1*)
(*]&],*)
(*Last,15]*)


(* ::Input:: *)
(*SequenceReplace[Out[29],{B,e}:>F]*)


(* ::Input:: *)
(*Grid@*)
(*TakeLargestBy[*)
(*Select[*)
(*Table[*)
(*With[{list=Tally@Partition[Out[31],i,1]},*)
(*Splice@*)
(*Table[*)
(*{First@j,i Last@j},*)
(*{j,list}]],*)
(*{i,1,100,1}],*)
(*And[*)
(*Length@First@#!=Last@#,*)
(*Length@First@#!=1*)
(*]&],*)
(*Last,15]*)


(* ::Input:: *)
(*SequenceReplace[Out[31],{A,e}:>G]*)


(* ::Input:: *)
(*Grid@*)
(*TakeLargestBy[*)
(*Select[*)
(*Table[*)
(*With[{list=Tally@Partition[Out[33],i,1]},*)
(*Splice@*)
(*Table[*)
(*{First@j,i Last@j},*)
(*{j,list}]],*)
(*{i,1,100,1}],*)
(*And[*)
(*Length@First@#!=Last@#,*)
(*Length@First@#!=1*)
(*]&],*)
(*Last,15]*)


(* ::Input:: *)
(*Length@*)
(*Select[*)
(*Table[*)
(*With[{list=Tally@Partition[Out[27],i,1]},*)
(*Splice@*)
(*Table[*)
(*{First@j,i Last@j},*)
(*{j,list}]],*)
(*{i,1,100,1}],*)
(*And[*)
(*Length@First@#!=Last@#,*)
(*Length@First@#!=1*)
(*]&]*)


(* ::Input:: *)
(*cardinal[e]=1*)


(* ::Input:: *)
(*cardinal[o]=1*)


(* ::Input:: *)
(*cardinal[A]=3*)


(* ::Input:: *)
(*Map[cardinal,{e,o,A}]*)


(* ::Input:: *)
(*Grid@*)
(*TakeLargestBy[*)
(*Select[*)
(*Table[*)
(*With[{list=Tally@Partition[Out[31],i,1]},*)
(*Splice@*)
(*Table[*)
(*{First@j,Total@Map[cardinal,First@j] Last@j},*)
(*{j,list}]],*)
(*{i,1,100,1}],*)
(*And[*)
(*Length@First@#!=Last@#,*)
(*Length@First@#!=1*)
(*]&],*)
(*Last,15]*)


(* ::Input:: *)
(*Select[*)
(*Table[*)
(*With[{list=Tally@Partition[Out[27],i,1]},*)
(*Splice@*)
(*Table[*)
(*{First@j,Total@Map[cardinal,First@j] Last@j,i Last@j, Last@j},*)
(*{j,list}]],*)
(*{i,1,100,1}],*)
(*And[*)
(*Length@First@#!=Last@#,*)
(*Length@First@#!=1*)
(*]&]*)


(* ::Input:: *)
(*Select[*)
(*Table[*)
(*With[{list=Tally@Partition[Out[27],i,1]},*)
(*Splice@*)
(*Table[*)
(*{First@j,Total@Map[cardinal,First@j] Last@j},*)
(*{j,list}]],*)
(*{i,1,100,1}],*)
(*And[*)
(*Length@First@#!=Last@#,*)
(*Length@First@#!=1*)
(*]&]*)


(* ::Input:: *)
(*Select[*)
(*Table[*)
(*With[{list=Tally@Partition[Out[27],i,1]},*)
(*Splice@*)
(*Table[*)
(*{First@j,Total@Map[cardinal,First@j] Last@j},*)
(*{j,list}]],*)
(*{i,1,100,1}],*)
(*And[*)
(*Length@First@#!=Last@#,*)
(*Length@First@#!=1*)
(*]&]*)


(* ::Input:: *)
(*Select[*)
(*Table[*)
(*With[{list=Tally@Partition[Out[27],i,1]},*)
(*Splice@*)
(*Table[*)
(*{First@j,Total@Map[cardinal,First@j] Last@j,i Last@j, Last@j},*)
(*{j,list}]],*)
(*{i,1,100,1}],*)
(*And[*)
(*Length@First@#!=Last@#,*)
(*Length@First@#!=1*)
(*]&]*)


(* ::Input:: *)
(*Select[*)
(*Table[*)
(*With[{list=Tally@Partition[Out[27],i,1]},*)
(*Splice@*)
(*Table[*)
(*{First@j,Total@Map[cardinal,First@j] Last@j,i Last@j, Last@j},*)
(*{j,list}]],*)
(*{i,1,100,1}],*)
(*And[*)
(*Last@#!=1*)
(*]&]*)


(* ::Input:: *)
(*Select[*)
(*Table[*)
(*With[{list=Tally@Partition[Out[27],i,1]},*)
(*Splice@*)
(*Table[*)
(*{First@j,Total@Map[cardinal,First@j] Last@j,i Last@j, Last@j},*)
(*{j,list}]],*)
(*{i,1,100,1}],*)
(*And[*)
(*Last@#!=1,*)
(*Length@First@#!=1*)
(*]&]*)


(* ::Input:: *)
(*Grid@*)
(*TakeLargestBy[*)
(*Select[*)
(*Table[*)
(*With[{list=Tally@Partition[Out[27],i,1]},*)
(*Splice@*)
(*Table[*)
(*{First@j,Total@Map[cardinal,First@j] Last@j,i Last@j, Last@j},*)
(*{j,list}]],*)
(*{i,1,100,1}],*)
(*And[*)
(*Last@#!=1,*)
(*Length@First@#!=1*)
(*]&]*)
(*,#[[2]]&,10]*)


(* ::Input:: *)
(*SequenceReplace[Out[27],{A,o}:>B]*)


(* ::Input:: *)
(*cardinal[B]=4*)


(* ::Input:: *)
(*Grid@*)
(*TakeLargestBy[*)
(*Select[*)
(*Table[*)
(*With[{list=Tally@Partition[Out[49],i,1]},*)
(*Splice@*)
(*Table[*)
(*{First@j,Total@Map[cardinal,First@j] Last@j,i Last@j, Last@j},*)
(*{j,list}]],*)
(*{i,1,100,1}],*)
(*And[*)
(*Last@#!=1,*)
(*Length@First@#!=1*)
(*]&]*)
(*,#[[2]]&,10]*)


(* ::Input:: *)
(*SequenceReplace[Out[49],{B,B}:>F]*)


(* ::Input:: *)
(*cardinal[F]=8*)


(* ::Input:: *)
(*Grid@*)
(*TakeLargestBy[*)
(*Select[*)
(*Table[*)
(*With[{*)
(*list=Tally@*)
(*Partition[Out[52],i,1]*)
(*},*)
(*Splice@*)
(*Table[*)
(*{First@j,Total@Map[cardinal,First@j] Last@j,i Last@j, Last@j},*)
(*{j,list}]],*)
(*{i,1,100,1}],*)
(*And[*)
(*Last@#!=1,*)
(*Length@First@#!=1*)
(*]&]*)
(*,#[[2]]&,10]*)


(* ::Input:: *)
(*SequenceReplace[Out[52],{B,e}:>G]*)


(* ::Input:: *)
(*cardinal[G]=5*)


(* ::Input:: *)
(*Grid@*)
(*TakeLargestBy[*)
(*Select[*)
(*Table[*)
(*With[{*)
(*list=Tally@*)
(*Partition[Out[55],i,1]*)
(*},*)
(*Splice@*)
(*Table[*)
(*{First@j,Total@Map[cardinal,First@j] Last@j,i Last@j, Last@j},*)
(*{j,list}]],*)
(*{i,1,100,1}],*)
(*And[*)
(*Last@#!=1,*)
(*Length@First@#!=1*)
(*]&]*)
(*,#[[2]]&,10]*)


(* ::Input:: *)
(*SequenceReplace[Out[55],{B,A}:>H]*)


(* ::Input:: *)
(*cardinal[H]=7*)


(* ::Input:: *)
(*Grid@*)
(*TakeLargestBy[*)
(*Select[*)
(*Table[*)
(*With[{*)
(*list=Tally@*)
(*Partition[Out[58],i,1]*)
(*},*)
(*Splice@*)
(*Table[*)
(*{First@j,Total@Map[cardinal,First@j] Last@j,i Last@j, Last@j},*)
(*{j,list}]],*)
(*{i,1,100,1}],*)
(*And[*)
(*Last@#!=1,*)
(*Length@First@#!=1*)
(*]&]*)
(*,#[[2]]&,10]*)


(* ::Input:: *)
(*cardinal[F]*)


(* ::Input:: *)
(*SequenceReplace[Out[58],{F,e}:>K]*)


(* ::Input:: *)
(*cardinal[K]=9*)


(* ::Input:: *)
(*Grid@*)
(*TakeLargestBy[*)
(*Select[*)
(*Table[*)
(*With[{*)
(*list=Tally@*)
(*Partition[Out[62],i,1]*)
(*},*)
(*Splice@*)
(*Table[*)
(*{First@j,Total@Map[cardinal,First@j] Last@j,i Last@j, Last@j},*)
(*{j,list}]],*)
(*{i,1,100,1}],*)
(*And[*)
(*Last@#!=1,*)
(*Length@First@#!=1*)
(*]&]*)
(*,#[[2]]&,10]*)


(* ::Input:: *)
(*cardinal[A]+cardinal[G]*)


(* ::Input:: *)
(*SequenceReplace[Out[58],{A,G}:>L]*)


(* ::Input:: *)
(*cardinal[L]=8*)


(* ::Input:: *)
(*Grid@*)
(*TakeLargestBy[*)
(*Select[*)
(*Table[*)
(*With[{*)
(*list=Tally@*)
(*Partition[Out[66],i,1]*)
(*},*)
(*Splice@*)
(*Table[*)
(*{First@j,Total@Map[cardinal,First@j] Last@j,i Last@j, Last@j},*)
(*{j,list}]],*)
(*{i,1,100,1}],*)
(*And[*)
(*Last@#!=1,*)
(*Length@First@#!=1*)
(*]&]*)
(*,#[[2]]&,10]*)


(* ::Input:: *)
(*cardinal[F]*)


(* ::Input:: *)
(*SequenceReplace[Out[66],{F,e}:>M]*)
