#!/usr/bin/env wolframscript
(* ::Package:: *)

(* ::Input:: *)
(*$RecursionLimit=Infinity*)
(**)
(*collatz[1]=1*)
(**)
(*collatz[n_Integer/;And[n>1,OddQ[n]]]:=collatz[n]=3 n+1*)
(*collatz[n_Integer/;And[n>1,EvenQ[n]]]:=collatz[n]=n/2*)
(**)
(*collatzseq[1]={1}*)
(*collatzseq[n_Integer/;n>1]:=collatzseq[n]={n,Splice@collatzseq@collatz@n}*)
(**)
(*collatzseq[93571393692802302];*)
(**)
(*map[n_Integer/;OddQ[n]]=o*)
(*map[n_Integer/;EvenQ[n]]=e*)
(**)
(*c=Map[map,collatzseq[93571393692802302]];*)
(*cardinal[e]=1*)
(*cardinal[o]=1*)
(**)
(*Grid@TakeLargestBy[Select[Table[With[{list=Tally@Partition[c,i,1]},Splice@Table[{First@j,Total@Map[cardinal,First@j] Last@j,i Last@j,Last@j},{j,list}]],{i,1,100,1}],And[Last@#!=1,Length@First@#!=1]&],#[[2]]&,10]*)


(* ::Input:: *)
(*With[{*)
(*initNum=93571393692802302*)
(*},*)
(*With[{*)
(*c=Map[map,collatzseq[initNum]]*)
(*},*)
(*1*)
(*]]*)


(* ::Input:: *)
(*With[{*)
(*initNum=93571393692802302,*)
(*cardinalList={e->1,o->1}*)
(*},*)
(*With[{*)
(*c=Map[map,collatzseq[initNum]],*)
(*cardinal=Association[{e->1,o->1}]*)
(*},*)
(*Grid@*)
(*TakeLargestBy[*)
(*Select[*)
(*Table[*)
(*With[{*)
(*list=Tally@Partition[c,i,1]*)
(*},*)
(*Splice@*)
(*Table[{*)
(*First@j,*)
(*Total@*)
(*Map[cardinal,First@j] Last@j,*)
(*i Last@j,*)
(*Last@j},*)
(*{j,list}]],*)
(*{i,1,100,1}],*)
(*And[*)
(*Last@#!=1,*)
(*Length@First@#!=1]*)
(*&]*)
(*,#[[2]]&,10]*)
(*]]*)


(* ::Input:: *)
(*With[{*)
(*initNum=93571393692802302,*)
(*cardinalList={e->1,o->1}*)
(*},*)
(*With[{*)
(*c=Map[map,collatzseq[initNum]],*)
(*cardinal=Association[{e->1,o->1}]*)
(*},*)
(*Grid@*)
(*Prepend[*)
(*TakeLargestBy[*)
(*Select[*)
(*Table[*)
(*With[{*)
(*list=Tally@Partition[c,i,1]*)
(*},*)
(*Splice@*)
(*Table[{*)
(*First@j,*)
(*Total@*)
(*Map[cardinal,First@j] Last@j,*)
(*i Last@j,*)
(*Last@j},*)
(*{j,list}]],*)
(*{i,1,100,1}],*)
(*And[*)
(*Last@#!=1,*)
(*Length@First@#!=1]*)
(*&]*)
(*,#[[2]]&,10]*)
(*,{"Pattern","Strength","Letters","Freq"}]*)
(*]]*)


(* ::Input:: *)
(*With[{*)
(*initNum=93571393692802302,*)
(*cardinalList={e->1,o->1}*)
(*},*)
(*With[{*)
(*c=Map[map,collatzseq[initNum]],*)
(*cardinal=Association[{e->1,o->1}]*)
(*},*)
(*With[{*)
(*data=Select[*)
(*Table[*)
(*With[{*)
(*list=Tally@Partition[c,i,1]*)
(*},*)
(*Splice@*)
(*Table[{*)
(*First@j,*)
(*Total@*)
(*Map[cardinal,First@j] Last@j,*)
(*i Last@j,*)
(*Last@j},*)
(*{j,list}]],*)
(*{i,1,100,1}],*)
(*And[*)
(*Last@#!=1,*)
(*Length@First@#!=1]*)
(*&]*)
(*},*)
(*Grid@*)
(*Prepend[*)
(*TakeLargestBy[data*)
(*,#[[2]]&,10]*)
(*,{"Pattern","Strength","Letters","Freq"}]*)
(*]]]*)


(* ::Input:: *)
(*With[{*)
(*initNum=93571393692802302,*)
(*carg=1,*)
(*cardinalList={e->1,o->1}*)
(*},*)
(*With[{*)
(*c=Map[map,collatzseq[initNum]],*)
(*cardinal=Association[{e->1,o->1}]*)
(*},*)
(*With[{*)
(*data=Select[*)
(*Table[*)
(*With[{*)
(*list=Tally@Partition[c,i,1]*)
(*},*)
(*Splice@*)
(*Table[{*)
(*First@j,*)
(*Total@*)
(*Map[cardinal,First@j] Last@j,*)
(*i Last@j,*)
(*Last@j},*)
(*{j,list}]],*)
(*{i,1,100,1}],*)
(*And[*)
(*Last@#!=1,*)
(*Length@First@#!=1]*)
(*&]*)
(*},*)
(*With[{*)
(*grid=Grid@*)
(*Prepend[*)
(*TakeLargestBy[data*)
(*,#[[2]]&,10]*)
(*,{"Pattern","Strength","Letters","Freq"}]*)
(*},*)
(*{data,grid,cardinalList}*)
(*]]]]*)


(* ::Input:: *)
(*With[{*)
(*initNum=93571393692802302,*)
(*carg=1,*)
(*cardinalList={e->1,o->1}*)
(*},*)
(*With[{*)
(*c=Map[map,collatzseq[initNum]],*)
(*cardinal=Association[{e->1,o->1}]*)
(*},*)
(*With[{*)
(*data=Select[*)
(*Table[*)
(*With[{*)
(*list=Tally@Partition[c,i,1]*)
(*},*)
(*Splice@*)
(*Table[{*)
(*First@j,*)
(*Total@*)
(*Map[cardinal,First@j] Last@j,*)
(*i Last@j,*)
(*Last@j},*)
(*{j,list}]],*)
(*{i,1,100,1}],*)
(*And[*)
(*Last@#!=1,*)
(*Length@First@#!=1]*)
(*&]*)
(*},*)
(*With[{*)
(*first=First@*)
(*TakeLargestBy[data*)
(*,#[[2]]&,1],*)
(*rankedData=TakeLargestBy[data*)
(*,#[[2]]&,10]*)
(*},*)
(*With[{*)
(*grid=Grid@*)
(*Prepend[*)
(*rankedData,*)
(*{"Pattern","Strength","Letters","Freq"}*)
(*]*)
(*},*)
(*{*)
(*grid,*)
(*SequenceReplace[c,*)
(*first:>C[carg+1]],*)
(*Prepend[cardinalList,{C[carg+1]->Length@first}]*)
(*}*)
(*]]]]]*)


(* ::Input:: *)
(**)


(* ::Input:: *)
(*With[{*)
(*initNum=93571393692802302,*)
(*carg=1,*)
(*cardinalList={e->1,o->1}*)
(*},*)
(*With[{*)
(*c=Map[map,collatzseq[initNum]],*)
(*cardinal=Association[{e->1,o->1}]*)
(*},*)
(*With[{*)
(*data=Select[*)
(*Table[*)
(*With[{*)
(*list=Tally@Partition[c,i,1]*)
(*},*)
(*Splice@*)
(*Table[{*)
(*First@j,*)
(*Total@*)
(*Map[cardinal,First@j] Last@j,*)
(*i Last@j,*)
(*Last@j},*)
(*{j,list}]],*)
(*{i,1,100,1}],*)
(*And[*)
(*Last@#!=1,*)
(*Length@First@#!=1]*)
(*&]*)
(*},*)
(*With[{*)
(*first=First@*)
(*TakeLargestBy[data*)
(*,#[[2]]&,1],*)
(*rankedData=TakeLargestBy[data*)
(*,#[[2]]&,10]*)
(*},*)
(*With[{*)
(*grid=Grid@*)
(*Prepend[*)
(*rankedData,*)
(*{"Pattern","Strength","Letters","Freq"}*)
(*]*)
(*},*)
(*{*)
(*grid,*)
(*SequenceReplace[c,*)
(*first:>C[carg+1]],*)
(*Prepend[cardinalList,C[carg+1]->Length@first]*)
(*}*)
(*]]]]]*)


(* ::Input:: *)
(*With[{*)
(*initNum=93571393692802302,*)
(*carg=1,*)
(*cardinalList={e->1,o->1}*)
(*},*)
(*With[{*)
(*c=Map[map,collatzseq[initNum]],*)
(*cardinal=Association[{e->1,o->1}]*)
(*},*)
(*With[{*)
(*data=Select[*)
(*Table[*)
(*With[{*)
(*list=Tally@Partition[c,i,1]*)
(*},*)
(*Splice@*)
(*Table[{*)
(*First@j,*)
(*Total@*)
(*Map[cardinal,First@j] Last@j,*)
(*i Last@j,*)
(*Last@j},*)
(*{j,list}]],*)
(*{i,1,100,1}],*)
(*And[*)
(*Last@#!=1,*)
(*Length@First@#!=1]*)
(*&]*)
(*},*)
(*With[{*)
(*first=First@*)
(*TakeLargestBy[data*)
(*,#[[2]]&,1],*)
(*rankedData=TakeLargestBy[data*)
(*,#[[2]]&,10]*)
(*},*)
(*With[{*)
(*grid=Grid@*)
(*Prepend[*)
(*rankedData,*)
(*{"Pattern","Strength","Letters","Freq"}*)
(*]*)
(*},*)
(*{*)
(*grid,*)
(*SequenceReplace[c,*)
(*first:>C[carg]],*)
(*Prepend[cardinalList,C[carg]->Length@first],*)
(*carg+1*)
(*}*)
(*]]]]]*)


(* ::Input:: *)
(*With[{*)
(*initNum=93571393692802302,*)
(*carg=1,*)
(*cardinalList={e->1,o->1}*)
(*},*)
(*With[{*)
(*c=Map[map,collatzseq[initNum]],*)
(*cardinal=Association[{e->1,o->1}]*)
(*},*)
(*With[{*)
(*data=Select[*)
(*Table[*)
(*With[{*)
(*list=Tally@Partition[c,i,1]*)
(*},*)
(*Splice@*)
(*Table[{*)
(*First@j,*)
(*Total@*)
(*Map[cardinal,First@j] Last@j,*)
(*i Last@j,*)
(*Last@j},*)
(*{j,list}]],*)
(*{i,1,100,1}],*)
(*And[*)
(*Last@#!=1,*)
(*Length@First@#!=1]*)
(*&]*)
(*},*)
(*With[{*)
(*first=First@*)
(*TakeLargestBy[data*)
(*,#[[2]]&,1],*)
(*rankedData=TakeLargestBy[data*)
(*,#[[2]]&,10]*)
(*},*)
(*With[{*)
(*grid=Grid@*)
(*Prepend[*)
(*rankedData,*)
(*{"Pattern","Strength","Letters","Freq"}*)
(*]*)
(*},*)
(*first*)
(*]]]]]*)


(* ::Input:: *)
(*With[{*)
(*initNum=93571393692802302,*)
(*carg=1,*)
(*cardinalList={e->1,o->1}*)
(*},*)
(*With[{*)
(*c=Map[map,collatzseq[initNum]],*)
(*cardinal=Association[{e->1,o->1}]*)
(*},*)
(*With[{*)
(*data=Select[*)
(*Table[*)
(*With[{*)
(*list=Tally@Partition[c,i,1]*)
(*},*)
(*Splice@*)
(*Table[{*)
(*First@j,*)
(*Total@*)
(*Map[cardinal,First@j] Last@j,*)
(*i Last@j,*)
(*Last@j},*)
(*{j,list}]],*)
(*{i,1,100,1}],*)
(*And[*)
(*Last@#!=1,*)
(*Length@First@#!=1]*)
(*&]*)
(*},*)
(*With[{*)
(*first=First@*)
(*First@*)
(*TakeLargestBy[data*)
(*,#[[2]]&,1],*)
(*rankedData=TakeLargestBy[data*)
(*,#[[2]]&,10]*)
(*},*)
(*With[{*)
(*grid=Grid@*)
(*Prepend[*)
(*rankedData,*)
(*{"Pattern","Strength","Letters","Freq"}*)
(*]*)
(*},*)
(*{*)
(*grid,*)
(*SequenceReplace[c,*)
(*first:>C[carg]],*)
(*Prepend[cardinalList,C[carg]->Length@first],*)
(*carg+1*)
(*}*)
(*]]]]]*)


(* ::Input:: *)
(* *)


(* ::Input:: *)
(*With[{*)
(*junk=None,*)
(*c=Map[map,collatzseq[93571393692802302]],*)
(*cardinalList={e->1,o->1},*)
(*carg=1*)
(*},*)
(*With[{*)
(*cardinal=Association[{e->1,o->1}]*)
(*},*)
(*With[{*)
(*data=Select[*)
(*Table[*)
(*With[{*)
(*list=Tally@Partition[c,i,1]*)
(*},*)
(*Splice@*)
(*Table[{*)
(*First@j,*)
(*Total@*)
(*Map[cardinal,First@j] Last@j,*)
(*i Last@j,*)
(*Last@j},*)
(*{j,list}]],*)
(*{i,1,100,1}],*)
(*And[*)
(*Last@#!=1,*)
(*Length@First@#!=1]*)
(*&]*)
(*},*)
(*With[{*)
(*first=First@*)
(*First@*)
(*TakeLargestBy[data*)
(*,#[[2]]&,1],*)
(*rankedData=TakeLargestBy[data*)
(*,#[[2]]&,10]*)
(*},*)
(*With[{*)
(*grid=Grid@*)
(*Prepend[*)
(*rankedData,*)
(*{"Pattern","Strength","Letters","Freq"}*)
(*]*)
(*},*)
(*{*)
(*grid,*)
(*SequenceReplace[c,*)
(*first:>C[carg]],*)
(*Prepend[cardinalList,C[carg]->Length@first],*)
(*carg+1*)
(*}*)
(*]]]]]*)


(* ::Input:: *)
(*\[AliasDelimiter]*)


(* ::Input:: *)
(*func[{*)
(*None,*)
(*Map[map,collatzseq[93571393692802302]],*)
(*{e->1,o->1},*)
(*1*)
(*}]*)


(* ::Input:: *)
(*Nest[*)
(*func,{*)
(*None,*)
(*Map[map,collatzseq[93571393692802302]],*)
(*{e->1,o->1},*)
(*1*)
(*},2]*)


(* ::Input:: *)
(*func[{*)
(*None,*)
(*{C[1],o,C[1],o,C[1],o,C[1],C[1],o,C[1],o,C[1],C[1],o,e,C[1],C[1],o,e,C[1],o,C[1],C[1],o,e,e,C[1],o,C[1],C[1],o,e,e,C[1],C[1],o,C[1],o,C[1],o,C[1],o,C[1],o,C[1],o,C[1],o,e,C[1],o,C[1],C[1],o,C[1],o,C[1],o,C[1],C[1],o,e,C[1],o,C[1],e,e,e,e,C[1],o,C[1],C[1],o,e,C[1],o,C[1],o,e,C[1],o,C[1],o,C[1],C[1],o,C[1],C[1],o,C[1],e,C[1],o,e,e,C[1],o,C[1],e,C[1],o,C[1],C[1],o,C[1],C[1],C[1],o,e,e,e,C[1],C[1],C[1],o,C[1],o,e,e,e,C[1],o,C[1],o,C[1],o,e,C[1],o,C[1],C[1],C[1],e,C[1],C[1],C[1],o,e,C[1],o,C[1],C[1],C[1],o,e,C[1],o,e,e,C[1],o,C[1],C[1],o,C[1],o,e,C[1],C[1],C[1],o,e,C[1],C[1],o,e,e,e,C[1],o,C[1],o,e,e,C[1],o,C[1],o,e,e,C[1],o,e,C[1],C[1],o,e,C[1],o,C[1],e,C[1],C[1],e,C[1],e,e,C[1],o,C[1],e,C[1],C[1],e,C[1],o,C[1],C[1],o,e,C[1],o,C[1],o,C[1],C[1],C[1],o,e,C[1],C[1],e,e,e,e,e,e,e,C[1],o,C[1],o,C[1],o,C[1],o,C[1],C[1],o,C[1],o,C[1],e,e,C[1],o,C[1],C[1],o,e,C[1],o,C[1],C[1],o,C[1],o,C[1],o,C[1],o,C[1],C[1],o,e,C[1],o,e,C[1],o,C[1],o,C[1],e,C[1],o,C[1],o,e,e,e,e,C[1],o,C[1],C[1],C[1],C[1],o,C[1],o,C[1],o,C[1],o,C[1],o,e,C[1],e,C[1],o,e,C[1],o,e,e,e,C[1],o,e,e,C[1],o,C[1],C[1],e,e,e,C[1],o,e,e,C[1],o,e,e,e,C[1],o,C[1],o,C[1],o,e,C[1],o,C[1],o,C[1],o,e,C[1],o,e,C[1],e,C[1],o,C[1],o,C[1],o,C[1],o,C[1],e,C[1],o,e,C[1],o,C[1],o,e,e,C[1],e,C[1],e,e,C[1],o,C[1],o,e,C[1],e,C[1],o,C[1],o,e,e,C[1],C[1],C[1],e,C[1],o,e,C[1],o,C[1],e,e,C[1],o,C[1],C[1],C[1],o,C[1],o,e,C[1],o,e,C[1],e,e,C[1],e,C[1],C[1],o,C[1],e,C[1],o,C[1],o,C[1],C[1],e,C[1],o,C[1],o,e,e,e,e,e,e,C[1],o,e,C[1],o,e,e,e,C[1],e,e,e,C[1],o,e,C[1],o,C[1],o,e,C[1],C[1],o,C[1],o,e,e,e,C[1],C[1],C[1],C[1],o,C[1],o,C[1],o,e,C[1],o,C[1],o,C[1],C[1],C[1],C[1],o,e,e,C[1],e,e,C[1],C[1],e,e,C[1],C[1],o,e,e,C[1],C[1],o,C[1],o,C[1],o,C[1],C[1],e,C[1],C[1],o,C[1],o,C[1],o,e,C[1],e,e,C[1],o,C[1],o,C[1],o,C[1],o,e,C[1],o,e,C[1],o,e,C[1],o,C[1],o,C[1],o,C[1],o,C[1],o,C[1],o,e,C[1],o,e,e,e,C[1],o,e,C[1],o,e,e,C[1],C[1],C[1],e,C[1],o,C[1],C[1],o,C[1],o,C[1],e,C[1],o,C[1],o,C[1],o,e,C[1],o,e,C[1],o,C[1],o,C[1],C[1],C[1],C[1],o,C[1],C[1],o,C[1],o,C[1],o,C[1],C[1],o,e,C[1],C[1],o,e,C[1],o,e,C[1],o,e,C[1],o,e,C[1],C[1],o,e,C[1],o,e,e,e,C[1],C[1],o,C[1],o,e,C[1],C[1],o,e,C[1],C[1],e,C[1],o,C[1],o,e,C[1],e,C[1],C[1],C[1],e,C[1],o,C[1],o,C[1],e,C[1],o,e,C[1],o,C[1],o,C[1],o,C[1],e,C[1],o,C[1],o,e,e,C[1],o,e,C[1],C[1],o,e,C[1],C[1],o,C[1],C[1],o,C[1],o,e,C[1],e,e,C[1],o,e,e,C[1],C[1],o,C[1],o,C[1],o,C[1],e,e,e,C[1],e,C[1],C[1],o,e,e,C[1],C[1],e,C[1],e,e,C[1],C[1],o,C[1],o,e,C[1],o,C[1],C[1],o,C[1],e,e,C[1],o,C[1],C[1],C[1],e,e,C[1],o,C[1],e,C[1],C[1],o,e,e,e,e,e,C[1],o,e,C[1],C[1],o,C[1],C[1],o,e,C[1],C[1],o,C[1],o,C[1],o,e,e,C[1],C[1],C[1],o,e,e,C[1],o,C[1],e,C[1],C[1],o,e,C[1],o,e,C[1],e,C[1],C[1],C[1],o,e,C[1],C[1],o,e,e,C[1],o,C[1],C[1],o,e,e,e,e,C[1],o,C[1],e,C[1],o,C[1],C[1],e,C[1],C[1],o,e,e,e,C[1],o,C[1],o,C[1],o,C[1],C[1],o,C[1],o,C[1],C[1],C[1],o,C[1],o,e,C[1],o,C[1],C[1],o,C[1],e,e,C[1],C[1],o,e,e,e,C[1],o,e,C[1],C[1],o,C[1],C[1],C[1],o,C[1],o,e,C[1],C[1],o,e,C[1],o,e,e,C[1],o,C[1],o,e,e,C[1],o,C[1],o,e,e,e,C[1],e,e,C[1],o,e,e,C[1],o,e,C[1],o,C[1],o,e,C[1],C[1],o,C[1],C[1],o,C[1],o,C[1],C[1],o,C[1],o,e,e,C[1],e,e,e,e,C[1],o,C[1],e,e,e,e,e,C[1],e,C[1],C[1],o,e,C[1],o,e,C[1],o,e,e,C[1],o,e,C[1],C[1],e,C[1],o,e,C[1],C[1],o,e,e,C[1],o,e,C[1],C[1],e,C[1],e,C[1],o,C[1],C[1],C[1],C[1],o,e,e,C[1],C[1],C[1],o,C[1],o,e,e,C[1],e,C[1],o,e,e,C[1],C[1],o,C[1],e,C[1],o,e,C[1],e,C[1],o,e,C[1],C[1],o,e,e,C[1],e,e,C[1],C[1],o,e,C[1],C[1],e,e,C[1],e,C[1],o,C[1],o,e,e,C[1],o,e,C[1],e,C[1],o,e,e,e,C[1],e,C[1],C[1],C[1],C[1],e,C[1],C[1],o,C[1],o,C[1],C[1],C[1],o,e,C[1],o,C[1],C[1],o,C[1],o,e,C[1],e,C[1],o,C[1],C[1],o,e,C[1],o,C[1],o,C[1],o,e,e,C[1],o,C[1],o,e,e,e,C[1],C[1],C[1],e,e,C[1],e,C[1],o,C[1],e,e,e,C[1],e,e,e,o},{C[1]->9,e->1,o->1},2}]*)


(* ::Input:: *)
(*func[*)
(*{\!\(\**)
(*TagBox[GridBox[{*)
(*{"\"\<Pattern\>\"", "\"\<Strength\>\"", "\"\<Letters\>\"", "\"\<Freq\>\""},*)
(*{*)
(*RowBox[{"{", *)
(*RowBox[{*)
(*TemplateBox[{"1"},*)
(*"C"], ",", "o", ",", *)
(*TemplateBox[{"1"},*)
(*"C"]}], "}"}], "3154", "498", "166"},*)
(*{*)
(*RowBox[{"{", *)
(*RowBox[{*)
(*TemplateBox[{"1"},*)
(*"C"], ",", "o"}], "}"}], "2920", "584", "292"},*)
(*{*)
(*RowBox[{"{", *)
(*RowBox[{*)
(*TemplateBox[{"1"},*)
(*"C"], ",", *)
(*TemplateBox[{"1"},*)
(*"C"]}], "}"}], "2376", "264", "132"},*)
(*{*)
(*RowBox[{"{", *)
(*RowBox[{"e", ",", *)
(*TemplateBox[{"1"},*)
(*"C"]}], "}"}], "1960", "392", "196"},*)
(*{*)
(*RowBox[{"{", *)
(*RowBox[{*)
(*TemplateBox[{"1"},*)
(*"C"], ",", "o", ",", *)
(*TemplateBox[{"1"},*)
(*"C"], ",", "o"}], "}"}], "1960", "392", "98"},*)
(*{*)
(*RowBox[{"{", *)
(*RowBox[{*)
(*TemplateBox[{"1"},*)
(*"C"], ",", "o", ",", *)
(*TemplateBox[{"1"},*)
(*"C"], ",", "o", ",", *)
(*TemplateBox[{"1"},*)
(*"C"]}], "}"}], "1682", "290", "58"},*)
(*{*)
(*RowBox[{"{", *)
(*RowBox[{"o", ",", *)
(*TemplateBox[{"1"},*)
(*"C"]}], "}"}], "1660", "332", "166"},*)
(*{*)
(*RowBox[{"{", *)
(*RowBox[{*)
(*TemplateBox[{"1"},*)
(*"C"], ",", "o", ",", "e", ",", *)
(*TemplateBox[{"1"},*)
(*"C"]}], "}"}], "1540", "308", "77"},*)
(*{*)
(*RowBox[{"{", *)
(*RowBox[{*)
(*TemplateBox[{"1"},*)
(*"C"], ",", *)
(*TemplateBox[{"1"},*)
(*"C"], ",", "o"}], "}"}], "1539", "243", "81"},*)
(*{*)
(*RowBox[{"{", *)
(*RowBox[{*)
(*TemplateBox[{"1"},*)
(*"C"], ",", "o", ",", "e"}], "}"}], "1386", "378", "126"}*)
(*},*)
(*AutoDelete->False,*)
(*GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],*)
(*"Grid"]\),{C[2],o,C[2],C[2],o,C[1],C[1],o,e,C[1],C[1],o,e,C[2],C[1],o,e,e,C[2],C[1],o,e,e,C[1],C[2],o,C[2],o,C[2],o,C[1],o,e,C[2],C[2],o,C[2],C[1],o,e,C[2],e,e,e,e,C[2],C[1],o,e,C[2],o,e,C[2],o,C[1],C[2],C[2],e,C[1],o,e,e,C[2],e,C[2],C[2],C[1],C[1],o,e,e,e,C[1],C[1],C[2],o,e,e,e,C[2],o,C[1],o,e,C[2],C[1],C[1],e,C[1],C[1],C[1],o,e,C[2],C[1],C[1],o,e,C[1],o,e,e,C[2],C[2],o,e,C[1],C[1],C[1],o,e,C[1],C[1],o,e,e,e,C[2],o,e,e,C[2],o,e,e,C[1],o,e,C[1],C[1],o,e,C[2],e,C[1],C[1],e,C[1],e,e,C[2],e,C[1],C[1],e,C[2],C[1],o,e,C[2],o,C[1],C[1],C[1],o,e,C[1],C[1],e,e,e,e,e,e,e,C[2],o,C[2],o,C[1],C[2],o,C[1],e,e,C[2],C[1],o,e,C[2],C[2],o,C[2],o,C[1],C[1],o,e,C[1],o,e,C[2],o,C[1],e,C[2],o,e,e,e,e,C[2],C[1],C[1],C[2],o,C[2],o,C[1],o,e,C[1],e,C[1],o,e,C[1],o,e,e,e,C[1],o,e,e,C[2],C[1],e,e,e,C[1],o,e,e,C[1],o,e,e,e,C[2],o,C[1],o,e,C[2],o,C[1],o,e,C[1],o,e,C[1],e,C[2],o,C[2],o,C[1],e,C[1],o,e,C[2],o,e,e,C[1],e,C[1],e,e,C[2],o,e,C[1],e,C[2],o,e,e,C[1],C[1],C[1],e,C[1],o,e,C[2],e,e,C[2],C[1],C[2],o,e,C[1],o,e,C[1],e,e,C[1],e,C[1],C[2],e,C[2],o,C[1],C[1],e,C[2],o,e,e,e,e,e,e,C[1],o,e,C[1],o,e,e,e,C[1],e,e,e,C[1],o,e,C[2],o,e,C[1],C[2],o,e,e,e,C[1],C[1],C[1],C[2],o,C[1],o,e,C[2],o,C[1],C[1],C[1],C[1],o,e,e,C[1],e,e,C[1],C[1],e,e,C[1],C[1],o,e,e,C[1],C[2],o,C[2],C[1],e,C[1],C[2],o,C[1],o,e,C[1],e,e,C[2],o,C[2],o,e,C[1],o,e,C[1],o,e,C[2],o,C[2],o,C[2],o,e,C[1],o,e,e,e,C[1],o,e,C[1],o,e,e,C[1],C[1],C[1],e,C[2],C[2],o,C[1],e,C[2],o,C[1],o,e,C[1],o,e,C[2],o,C[1],C[1],C[1],C[2],C[2],o,C[2],C[1],o,e,C[1],C[1],o,e,C[1],o,e,C[1],o,e,C[1],o,e,C[1],C[1],o,e,C[1],o,e,e,e,C[1],C[2],o,e,C[1],C[1],o,e,C[1],C[1],e,C[2],o,e,C[1],e,C[1],C[1],C[1],e,C[2],o,C[1],e,C[1],o,e,C[2],o,C[2],e,C[2],o,e,e,C[1],o,e,C[1],C[1],o,e,C[1],C[2],C[2],o,e,C[1],e,e,C[1],o,e,e,C[1],C[2],o,C[2],e,e,e,C[1],e,C[1],C[1],o,e,e,C[1],C[1],e,C[1],e,e,C[1],C[2],o,e,C[2],C[2],e,e,C[2],C[1],C[1],e,e,C[2],e,C[1],C[1],o,e,e,e,e,e,C[1],o,e,C[1],C[2],C[1],o,e,C[1],C[2],o,C[1],o,e,e,C[1],C[1],C[1],o,e,e,C[2],e,C[1],C[1],o,e,C[1],o,e,C[1],e,C[1],C[1],C[1],o,e,C[1],C[1],o,e,e,C[2],C[1],o,e,e,e,e,C[2],e,C[2],C[1],e,C[1],C[1],o,e,e,e,C[2],o,C[2],C[2],o,C[1],C[1],C[2],o,e,C[2],C[2],e,e,C[1],C[1],o,e,e,e,C[1],o,e,C[1],C[2],C[1],C[2],o,e,C[1],C[1],o,e,C[1],o,e,e,C[2],o,e,e,C[2],o,e,e,e,C[1],e,e,C[1],o,e,e,C[1],o,e,C[2],o,e,C[1],C[2],C[2],o,C[1],C[2],o,e,e,C[1],e,e,e,e,C[2],e,e,e,e,e,C[1],e,C[1],C[1],o,e,C[1],o,e,C[1],o,e,e,C[1],o,e,C[1],C[1],e,C[1],o,e,C[1],C[1],o,e,e,C[1],o,e,C[1],C[1],e,C[1],e,C[2],C[1],C[1],C[1],o,e,e,C[1],C[1],C[2],o,e,e,C[1],e,C[1],o,e,e,C[1],C[2],e,C[1],o,e,C[1],e,C[1],o,e,C[1],C[1],o,e,e,C[1],e,e,C[1],C[1],o,e,C[1],C[1],e,e,C[1],e,C[2],o,e,e,C[1],o,e,C[1],e,C[1],o,e,e,e,C[1],e,C[1],C[1],C[1],C[1],e,C[1],C[2],o,C[1],C[1],C[1],o,e,C[2],C[2],o,e,C[1],e,C[2],C[1],o,e,C[2],o,C[1],o,e,e,C[2],o,e,e,e,C[1],C[1],C[1],e,e,C[1],e,C[2],e,e,e,C[1],e,e,e,o},{C[2]->(9+9+1)^2,C[1]->9,e->1,o->1},3}*)
(*]*)


(* ::Input:: *)
(*func[*)
(*{\!\(\**)
(*TagBox[GridBox[{*)
(*{"\"\<Pattern\>\"", "\"\<Strength\>\"", "\"\<Letters\>\"", "\"\<Freq\>\""},*)
(*{*)
(*RowBox[{"{", *)
(*RowBox[{*)
(*TemplateBox[{"2"},*)
(*"C"], ",", "o"}], "}"}], "26064", "144", "72"},*)
(*{*)
(*RowBox[{"{", *)
(*RowBox[{"e", ",", *)
(*TemplateBox[{"2"},*)
(*"C"]}], "}"}], "24254", "134", "67"},*)
(*{*)
(*RowBox[{"{", *)
(*RowBox[{"e", ",", *)
(*TemplateBox[{"2"},*)
(*"C"], ",", "o"}], "}"}], "12342", "102", "34"},*)
(*{*)
(*RowBox[{"{", *)
(*RowBox[{*)
(*TemplateBox[{"2"},*)
(*"C"], ",", "o", ",", *)
(*TemplateBox[{"2"},*)
(*"C"]}], "}"}], "11568", "48", "16"},*)
(*{*)
(*RowBox[{"{", *)
(*RowBox[{*)
(*TemplateBox[{"2"},*)
(*"C"], ",", "o", ",", "e"}], "}"}], "10890", "90", "30"},*)
(*{*)
(*RowBox[{"{", *)
(*RowBox[{*)
(*TemplateBox[{"2"},*)
(*"C"], ",", *)
(*TemplateBox[{"2"},*)
(*"C"]}], "}"}], "10108", "28", "14"},*)
(*{*)
(*RowBox[{"{", *)
(*RowBox[{*)
(*TemplateBox[{"2"},*)
(*"C"], ",", "o", ",", *)
(*TemplateBox[{"1"},*)
(*"C"]}], "}"}], "9646", "78", "26"},*)
(*{*)
(*RowBox[{"{", *)
(*RowBox[{*)
(*TemplateBox[{"1"},*)
(*"C"], ",", *)
(*TemplateBox[{"2"},*)
(*"C"]}], "}"}], "9620", "52", "26"},*)
(*{*)
(*RowBox[{"{", *)
(*RowBox[{"e", ",", "e", ",", *)
(*TemplateBox[{"2"},*)
(*"C"]}], "}"}], "9438", "78", "26"},*)
(*{*)
(*RowBox[{"{", *)
(*RowBox[{"o", ",", "e", ",", *)
(*TemplateBox[{"2"},*)
(*"C"]}], "}"}], "8712", "72", "24"}*)
(*},*)
(*AutoDelete->False,*)
(*GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],*)
(*"Grid"]\),{C[3],C[2],C[3],C[1],C[1],o,e,C[1],C[1],o,e,C[2],C[1],o,e,e,C[2],C[1],o,e,e,C[1],C[3],C[3],C[3],C[1],o,e,C[2],C[3],C[2],C[1],o,e,C[2],e,e,e,e,C[2],C[1],o,e,C[3],e,C[3],C[1],C[2],C[2],e,C[1],o,e,e,C[2],e,C[2],C[2],C[1],C[1],o,e,e,e,C[1],C[1],C[3],e,e,e,C[3],C[1],o,e,C[2],C[1],C[1],e,C[1],C[1],C[1],o,e,C[2],C[1],C[1],o,e,C[1],o,e,e,C[2],C[3],e,C[1],C[1],C[1],o,e,C[1],C[1],o,e,e,e,C[3],e,e,C[3],e,e,C[1],o,e,C[1],C[1],o,e,C[2],e,C[1],C[1],e,C[1],e,e,C[2],e,C[1],C[1],e,C[2],C[1],o,e,C[3],C[1],C[1],C[1],o,e,C[1],C[1],e,e,e,e,e,e,e,C[3],C[3],C[1],C[3],C[1],e,e,C[2],C[1],o,e,C[2],C[3],C[3],C[1],C[1],o,e,C[1],o,e,C[3],C[1],e,C[3],e,e,e,e,C[2],C[1],C[1],C[3],C[3],C[1],o,e,C[1],e,C[1],o,e,C[1],o,e,e,e,C[1],o,e,e,C[2],C[1],e,e,e,C[1],o,e,e,C[1],o,e,e,e,C[3],C[1],o,e,C[3],C[1],o,e,C[1],o,e,C[1],e,C[3],C[3],C[1],e,C[1],o,e,C[3],e,e,C[1],e,C[1],e,e,C[3],e,C[1],e,C[3],e,e,C[1],C[1],C[1],e,C[1],o,e,C[2],e,e,C[2],C[1],C[3],e,C[1],o,e,C[1],e,e,C[1],e,C[1],C[2],e,C[3],C[1],C[1],e,C[3],e,e,e,e,e,e,C[1],o,e,C[1],o,e,e,e,C[1],e,e,e,C[1],o,e,C[3],e,C[1],C[3],e,e,e,C[1],C[1],C[1],C[3],C[1],o,e,C[3],C[1],C[1],C[1],C[1],o,e,e,C[1],e,e,C[1],C[1],e,e,C[1],C[1],o,e,e,C[1],C[3],C[2],C[1],e,C[1],C[3],C[1],o,e,C[1],e,e,C[3],C[3],e,C[1],o,e,C[1],o,e,C[3],C[3],C[3],e,C[1],o,e,e,e,C[1],o,e,C[1],o,e,e,C[1],C[1],C[1],e,C[2],C[3],C[1],e,C[3],C[1],o,e,C[1],o,e,C[3],C[1],C[1],C[1],C[2],C[3],C[2],C[1],o,e,C[1],C[1],o,e,C[1],o,e,C[1],o,e,C[1],o,e,C[1],C[1],o,e,C[1],o,e,e,e,C[1],C[3],e,C[1],C[1],o,e,C[1],C[1],e,C[3],e,C[1],e,C[1],C[1],C[1],e,C[3],C[1],e,C[1],o,e,C[3],C[2],e,C[3],e,e,C[1],o,e,C[1],C[1],o,e,C[1],C[2],C[3],e,C[1],e,e,C[1],o,e,e,C[1],C[3],C[2],e,e,e,C[1],e,C[1],C[1],o,e,e,C[1],C[1],e,C[1],e,e,C[1],C[3],e,C[2],C[2],e,e,C[2],C[1],C[1],e,e,C[2],e,C[1],C[1],o,e,e,e,e,e,C[1],o,e,C[1],C[2],C[1],o,e,C[1],C[3],C[1],o,e,e,C[1],C[1],C[1],o,e,e,C[2],e,C[1],C[1],o,e,C[1],o,e,C[1],e,C[1],C[1],C[1],o,e,C[1],C[1],o,e,e,C[2],C[1],o,e,e,e,e,C[2],e,C[2],C[1],e,C[1],C[1],o,e,e,e,C[3],C[2],C[3],C[1],C[1],C[3],e,C[2],C[2],e,e,C[1],C[1],o,e,e,e,C[1],o,e,C[1],C[2],C[1],C[3],e,C[1],C[1],o,e,C[1],o,e,e,C[3],e,e,C[3],e,e,e,C[1],e,e,C[1],o,e,e,C[1],o,e,C[3],e,C[1],C[2],C[3],C[1],C[3],e,e,C[1],e,e,e,e,C[2],e,e,e,e,e,C[1],e,C[1],C[1],o,e,C[1],o,e,C[1],o,e,e,C[1],o,e,C[1],C[1],e,C[1],o,e,C[1],C[1],o,e,e,C[1],o,e,C[1],C[1],e,C[1],e,C[2],C[1],C[1],C[1],o,e,e,C[1],C[1],C[3],e,e,C[1],e,C[1],o,e,e,C[1],C[2],e,C[1],o,e,C[1],e,C[1],o,e,C[1],C[1],o,e,e,C[1],e,e,C[1],C[1],o,e,C[1],C[1],e,e,C[1],e,C[3],e,e,C[1],o,e,C[1],e,C[1],o,e,e,e,C[1],e,C[1],C[1],C[1],C[1],e,C[1],C[3],C[1],C[1],C[1],o,e,C[2],C[3],e,C[1],e,C[2],C[1],o,e,C[3],C[1],o,e,e,C[3],e,e,e,C[1],C[1],C[1],e,e,C[1],e,C[2],e,e,e,C[1],e,e,e,o},{C[3]->362^2,C[2]->361,C[1]->9,e->1,o->1},4}*)
(*]*)


(* ::Input:: *)
(*Nest[func,{*)
(*None,*)
(*Map[map,collatzseq[93571393692802302]],*)
(*{e->1,o->1},*)
(*1*)
(*},*)
(*10*)
(*]*)


(* ::Input:: *)
(*Nest[func,{*)
(*None,*)
(*Map[map,collatzseq[93571393692802302]],*)
(*{e->1,o->1},*)
(*1*)
(*},*)
(*20*)
(*]*)


(* ::Input:: *)
(*Nest[func,{*)
(*None,*)
(*Map[map,collatzseq[27]],*)
(*{e->1,o->1},*)
(*1*)
(*},*)
(*2*)
(*]*)


(* ::Input:: *)
(*Nest[func,{*)
(*None,*)
(*Map[map,collatzseq[27]],*)
(*{e->1,o->1},*)
(*1*)
(*},*)
(*3*)
(*]*)


(* ::Input:: *)
(*Nest[func,{*)
(*None,*)
(*Map[map,collatzseq[27]],*)
(*{e->1,o->1},*)
(*1*)
(*},*)
(*4*)
(*]*)


(* ::Input:: *)
(*Manipulate[*)
(*Nest[func,{*)
(*None,*)
(*Map[map,collatzseq[27]],*)
(*{e->1,o->1},*)
(*1*)
(*},*)
(*j*)
(*]*)
(*,{j,1,15,1}]*)
